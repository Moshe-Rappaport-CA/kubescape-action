<testsuites errors="0" disabled="0" failures="6" tests="7" time="" name="Kubescape Scanning">
    <testsuite name="" disabled="0" errors="0" failures="0" hostname="" id="0" skipped="" time="" timestamp="2022-09-11 14:33:52.808844395 +0000 UTC" file="example2/ks-deployment.yaml">
        <properties></properties>
        <testcase classname="" status="failed" name="" time="">
            <failure message="Resource: kind=Deployment/namespace=kubescape/; name=kubescape&#xA;&#xA;Test: Immutable container filesystem&#xA;Severity: Low&#xA;Remediation: Set the filesystem of the container to read-only when possible (POD securityContext, readOnlyRootFilesystem: true). If containers application needs to write into the filesystem, it is recommended to mount secondary filesystems for specific directories where application require write access.&#xA;Link for more details: https://hub.armosec.io/docs/c-0017&#xA;Available fix: &#xA; - spec.template.spec.containers[0].securityContext.readOnlyRootFilesystem=true&#xA;&#xA;Test: Resources memory limit and request&#xA;Severity: High&#xA;Remediation: Set the memory limit or use exception mechanism to avoid unnecessary notifications.&#xA;Link for more details: https://hub.armosec.io/docs/c-0004&#xA;Failed paths: &#xA; - spec.template.spec.containers[0].resources.limits.memory&#xA;&#xA;Test: Allow privilege escalation&#xA;Severity: Medium&#xA;Remediation: If your application does not need it, make sure the allowPrivilegeEscalation field of the securityContext is set to false.&#xA;Link for more details: https://hub.armosec.io/docs/c-0016&#xA;Available fix: &#xA; - spec.template.spec.containers[0].securityContext.allowPrivilegeEscalation=false&#xA;&#xA;Test: Images from allowed registry&#xA;Severity: Medium&#xA;Remediation: You should enable all trusted repositories in the parameters of this control.&#xA;Link for more details: https://hub.armosec.io/docs/c-0078&#xA;Failed paths: &#xA; - spec.template.spec.containers[0].image&#xA;&#xA;Test: Ingress and Egress blocked&#xA;Severity: Medium&#xA;Remediation: Define a network policy that restricts ingress and egress connections.&#xA;Link for more details: https://hub.armosec.io/docs/c-0030&#xA;&#xA;Test: CVE-2022-0492-cgroups-container-escape&#xA;Severity: Medium&#xA;Remediation: Activate AppArmor or SELinux. Follow the least privilege principle and remove root privileges or privilege escalation option and CAP_DAC_OVERRIDE capability. Make sure you don&#39;t allow container images from potentially dangerous sources and that containers that must have high privileges are taken from protected repositories.&#xA;Link for more details: https://hub.armosec.io/docs/c-0086&#xA;Available fix: &#xA; - spec.template.spec.securityContext.runAsNonRoot=true&#xA; - spec.template.spec.securityContext.allowPrivilegeEscalation=false&#xA;&#xA;Test: Automatic mapping of service account&#xA;Severity: Medium&#xA;Remediation: Disable automatic mounting of service account tokens to PODs either at the service account level or at the individual POD level, by specifying the automountServiceAccountToken: false. Note that POD level takes precedence.&#xA;Link for more details: https://hub.armosec.io/docs/c-0034&#xA;Available fix: &#xA; - spec.template.spec.automountServiceAccountToken=false&#xA;&#xA;Test: Forbidden Container Registries&#xA;Severity: Medium&#xA;Remediation: Limit the registries from which you pull container images from&#xA;Link for more details: https://hub.armosec.io/docs/c-0001&#xA;Failed paths: &#xA; - spec.template.spec.containers[0].image&#xA;&#xA;Test: K8s common labels usage&#xA;Severity: Low&#xA;Remediation: Define applicable labels or use the exception mechanism to prevent further notifications.&#xA;Link for more details: https://hub.armosec.io/docs/c-0077&#xA;Available fix: &#xA; - metadata.labels=YOUR_VALUE&#xA; - spec.template.metadata.labels=YOUR_VALUE&#xA;&#xA;Test: Linux hardening&#xA;Severity: Medium&#xA;Remediation: You can use AppArmor, Seccomp, SELinux and Linux Capabilities mechanisms to restrict containers abilities to utilize unwanted privileges.&#xA;Link for more details: https://hub.armosec.io/docs/c-0055&#xA;Available fix: &#xA; - spec.template.spec.containers[0].seccompProfile=YOUR_VALUE&#xA; - spec.template.spec.containers[0].seLinuxOptions=YOUR_VALUE&#xA; - spec.template.spec.containers[0].capabilities.drop=YOUR_VALUE&#xA;&#xA;Test: Non-root containers&#xA;Severity: Medium&#xA;Remediation: If your application does not need root privileges, make sure to define the runAsUser or runAsGroup under the PodSecurityContext and use user ID 1000 or higher. Do not turn on allowPrivlegeEscalation bit and make sure runAsNonRoot is true.&#xA;Link for more details: https://hub.armosec.io/docs/c-0013&#xA;Available fix: &#xA; - spec.template.spec.containers[0].securityContext.runAsNonRoot=true&#xA; - spec.template.spec.containers[0].securityContext.allowPrivilegeEscalation=false&#xA;&#xA;&#xA;===================================================================================================================&#xA;&#xA;Resource: kind=Namespace/name=kubescape&#xA;&#xA;Test: Cluster internal networking&#xA;Severity: Medium&#xA;Remediation: Define Kubernetes network policies or use alternative products to protect cluster network.&#xA;Link for more details: https://hub.armosec.io/docs/c-0054&#xA;&#xA;Test: Network mapping&#xA;Severity: Medium&#xA;Remediation: Define network policies or use similar network protection mechanisms.&#xA;Link for more details: https://hub.armosec.io/docs/c-0049&#xA;&#xA;&#xA;===================================================================================================================&#xA;&#xA;Resource: kind=ServiceAccount/namespace=kubescape/; name=kubescape-discovery&#xA;&#xA;Test: Automatic mapping of service account&#xA;Severity: Medium&#xA;Remediation: Disable automatic mounting of service account tokens to PODs either at the service account level or at the individual POD level, by specifying the automountServiceAccountToken: false. Note that POD level takes precedence.&#xA;Link for more details: https://hub.armosec.io/docs/c-0034&#xA;Available fix: &#xA; - automountServiceAccountToken=false&#xA;&#xA;" type="Resources"></failure>
        </testcase>
    </testsuite>
    <testsuite name="" disabled="0" errors="0" failures="0" hostname="" id="1" skipped="" time="" timestamp="2022-09-11 14:33:52.808844395 +0000 UTC" file="example2/test.yaml">
        <properties></properties>
        <testcase classname="" status="failed" name="" time="">
            <failure message="Resource: kind=Deployment/namespace=ns/; name=test&#xA;&#xA;Test: Image pull policy on latest tag&#xA;Severity: Low&#xA;Remediation: Set ImagePullPolicy to Always in all PODs found by this control.&#xA;Link for more details: https://hub.armosec.io/docs/c-0075&#xA;Failed paths: &#xA; - spec.template.spec.containers[0].image&#xA; - spec.template.spec.containers[0].imagePullPolicy&#xA;&#xA;Test: Images from allowed registry&#xA;Severity: Medium&#xA;Remediation: You should enable all trusted repositories in the parameters of this control.&#xA;Link for more details: https://hub.armosec.io/docs/c-0078&#xA;Failed paths: &#xA; - spec.template.spec.containers[0].image&#xA;&#xA;Test: Ingress and Egress blocked&#xA;Severity: Medium&#xA;Remediation: Define a network policy that restricts ingress and egress connections.&#xA;Link for more details: https://hub.armosec.io/docs/c-0030&#xA;&#xA;" type="Resources"></failure>
        </testcase>
    </testsuite>
    <testsuite name="" disabled="0" errors="0" failures="0" hostname="" id="2" skipped="" time="" timestamp="2022-09-11 14:33:52.808844395 +0000 UTC" file="example2/fronted.yaml">
        <properties></properties>
        <testcase classname="" status="failed" name="" time="">
            <failure message="Resource: kind=Deployment/name=frontend&#xA;&#xA;Test: Images from allowed registry&#xA;Severity: Medium&#xA;Remediation: You should enable all trusted repositories in the parameters of this control.&#xA;Link for more details: https://hub.armosec.io/docs/c-0078&#xA;Failed paths: &#xA; - spec.template.spec.containers[0].image&#xA;&#xA;Test: Ingress and Egress blocked&#xA;Severity: Medium&#xA;Remediation: Define a network policy that restricts ingress and egress connections.&#xA;Link for more details: https://hub.armosec.io/docs/c-0030&#xA;&#xA;Test: Forbidden Container Registries&#xA;Severity: Medium&#xA;Remediation: Limit the registries from which you pull container images from&#xA;Link for more details: https://hub.armosec.io/docs/c-0001&#xA;Failed paths: &#xA; - spec.template.spec.containers[0].image&#xA;&#xA;Test: Label usage for resources&#xA;Severity: Low&#xA;Remediation: Define labels that are most suitable to your needs of use the exceptions to prevent further notifications.&#xA;Link for more details: https://hub.armosec.io/docs/c-0076&#xA;Available fix: &#xA; - metadata.labels=YOUR_VALUE&#xA;&#xA;Test: K8s common labels usage&#xA;Severity: Low&#xA;Remediation: Define applicable labels or use the exception mechanism to prevent further notifications.&#xA;Link for more details: https://hub.armosec.io/docs/c-0077&#xA;Available fix: &#xA; - metadata.labels=YOUR_VALUE&#xA; - spec.template.metadata.labels=YOUR_VALUE&#xA;&#xA;" type="Resources"></failure>
        </testcase>
    </testsuite>
</testsuites>
